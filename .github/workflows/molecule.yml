---
name: 'molecule'
on:  # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - 'main'

  push:
    branches:
      - 'main'

  workflow_dispatch:
    inputs:
      repoCache:
        description: 'Reset or disable the cache?'
        type: 'choice'
        default: 'enabled'
        options:
          - 'enabled'
          - 'disabled'
          - 'reset'

permissions:
  contents: 'read'

# Adding these as env variables makes it easy to re-use them in different steps and in bash.
env:
  cache_archive: 'molecule_cache.tar.gz'
  # This is the dir renovate provides
  # If we set our own directory via cacheDir, we can run into permissions issues.
  # It is also possible to cache a higher level of the directory, but it has minimal benefit. While renovate execution
  # time gets faster, it also takes longer to upload the cache as it grows bigger.
  cache_dir: '/tmp/.cache/molecule'
  # This can be manually changed to bust the cache if neccessary.
  cache_key: 'molecule-cache'

jobs:
  molecule:
    permissions:
      contents: 'write'
    runs-on: 'ubuntu-latest'
    container:
      image: '${{ matrix.container }}'
      credentials:
        username: '${{ secrets.crc_username }}'
        password: '${{ secrets.crc_password }}'
      options: '--privileged'
    strategy:
      matrix:
        container:
          # RHEL 9
          - 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.16'
          - 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel9:2.15'
          # RHEL 8
          - 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.16'
          - 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.15'
          - 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.14'
          - 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.13'
          - 'registry.redhat.io/ansible-automation-platform/ee-minimal-rhel8:2.12'

    steps:
      - name: 'Extract Ansible Core version of the image'
        run: |
          ansible_version="$( "${{ matrix.container }}" | awk -F ':' '{ print $2 }')"
          echo "ansible_version=${ansible_version}" >> "${GITHUB_ENV}"

      - name: 'Install NodeJS and podman'
        run: 'microdnf install nodejs podman -y'

      - name: 'Checkout repository'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # v4.1.7

      - name: 'Download cache of the previous workflow run'
        uses: 'dawidd6/action-download-artifact@bf251b5aa9c2f7eeb574a96ee720e24f801b7c11' # v6
        if: "github.event.inputs.repoCache != 'disabled'"
        continue-on-error: true
        with:
          name: '${{ env.cache_key }}-${ansible_version}'
          path: 'cache-download'

      - name: 'Extract molecule cache to improve performance'
        run: |
          set -x
          # Skip if no cache is set, such as the first time it runs.
          if [ ! -d cache-download ] ; then
            echo "No cache found."
            exit 0
          fi

          # Make sure the directory exists, and extract it there. Note that it's nested in the download directory.
          mkdir -p "${cache_dir}"
          tar -xzf "cache-download/${cache_archive}" -C "${cache_dir}"

#      - name: 'Install Python'
#        run: |
#          dnf install -y python${{ matrix.python_version }} python${{ matrix.python_version }}-pip

      - name: 'Install Python packages'
        run: |
          # renovate: datasource=pypi
          pip3 install molecule==24.6.0
          mkdir -pv "${cache_dir}"

      - name: 'Run molecule'
        run: |
          molecule test

      - name: 'Compress molecule cache to improve performance'
        run: |
          # The -C is important, as otherwise we end up extracting the files with
          # their full path, ultimately leading to a nested directory situation.
          tar -czf "${cache_archive}" -C "${cache_dir}" .

      - name: 'Upload compressed cache'
        uses: 'actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808' # v4.3.3
        if: "github.event.inputs.repoCache != 'disabled'"
        with:
          name: '${{ env.cache_key }}-${ansible_version}'
          path: '${{ env.cache_archive }}'
          # Since this is updated and restored on every run, we don't need to keep it
          # for long. Just make sure this value is large enough that multiple renovate
          # runs can happen before older cache archives are deleted.
          retention-days: 1
...
