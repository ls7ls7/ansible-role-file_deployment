---
argument_specs:
  main:
    short_description: 'Deploy files on managed nodes'
    description:
      - 'The only entry point of the role C(file_deployment)'
      - 'This will deploy the files defined in C(fd_files)'
    author:
      - 'Steffen Scheib'
    options:
      fd_quiet_assert:
        description: 'Whether to quiet assert statements'
        version_added: '1.0.0'
        type: 'bool'
        required: false
        default: false

      fd_files:
        description:
          - 'Files or content to deploy'
          - 'For files specify C(src) and for content specify C(content) to deploy'
        version_added: '1.0.0'
        type: 'list'
        required: true
        elements: 'dict'
        options:
          src:
            description:
              - 'Source file to copy to the destination'
              - 'Required if C(content) is not defined'
            type: 'str'
            # required_one_of is only supported for modules
            # https://github.com/ansible/ansible/issues/74995
            required: false

          content:
            description:
              - 'Content to add to a file on the managed node'
              - 'Required if C(src) is not defined'
              - 'B(Templating is not supported), this is meant for B(plaintext files)'
            type: 'str'
            # required_one_of is only supported for modules
            # https://github.com/ansible/ansible/issues/74995
            required: false

          dest:
            description: 'Destination path on the managed node for either the C(content) or C(src) file'
            type: 'str'
            required: true

          owner:
            description: 'Owner of the destination file for either the C(content) or C(src) file'
            type: 'str'
            required: true

          group:
            description: 'Group of the destination file for either the C(content) or C(src) file'
            type: 'str'
            required: true

          mode:
            description: 'Mode of the destination file for either the C(content) or C(src) file'
            type: 'str'
            required: true

          attributes:
            description: 'The attributes the resulting filesystem object should have'
            type: 'str'
            required: false

          backup:
            description: 'The attributes the resulting filesystem object should have'
            type: 'bool'
            required: false
            default: false

          checksum:
            description:
              - 'SHA1 checksum of the file being transferred'
              - 'Used to validate that the copy of the file was successful'
              - 'If this is not provided, Ansible will use the local calculated checksum of the src file'
            type: 'str'
            required: false

          decrypt:
            description: 'This option controls the auto-decryption of source files using vault'
            type: 'bool'
            required: false
            default: true

          directory_mode:
            description:
              - 'Set the access permissions of newly created directories to the given mode'
              - 'Permissions on existing directories do not change'
            type: 'str'
            required: false

          follow:
            description: >-
              This flag indicates that filesystem links in the destination, if they exist, should be followed
            type: 'bool'
            required: false
            default: true

          force:
            description:
              - 'Influence whether the remote file must always be replaced'
              - 'If C(true), the remote file will be replaced when contents are different than the source'
              - 'If C(false), the file will only be transferred if the destination does not exist'
            type: 'bool'
            required: false
            default: true

          local_follow:
            description: >-
              This flag indicates that filesystem links in the source tree, if they exist, should be followed
            type: 'bool'
            required: false
            default: true

          remote_src:
            description:
              - 'Influence whether src needs to be transferred or already is present remotely'
              - 'If C(false), it will search for C(src) on the controller node'
              - 'If C(true) it will search for C(src) on the managed (remote) node'
              - 'Auto-decryption of files does not work when C(remote_src=yes)'
            type: 'bool'
            required: false
            default: false

          selevel:
            description: 'The level part of the SELinux filesystem object context'
            type: 'str'
            required: false

          serole:
            description: 'The role part of the SELinux filesystem object context'
            type: 'str'
            required: false

          setype:
            description: 'The type part of the SELinux filesystem object context'
            type: 'str'
            required: false

          seuser:
            description: 'The user part of the SELinux filesystem object context'
            type: 'str'
            required: false

          unsafe_writes:
            description: >-
              Influence when to use atomic operation to prevent data corruption or inconsistent reads from
              the target filesystem object
            type: 'bool'
            required: false
            default: false

          validate:
            description: 'The validation command to run before copying the updated file into the final destination'
            type: 'str'
            required: false
...
